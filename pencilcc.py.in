#! /usr/bin/env python3
# -*- coding: UTF-8 -*-
# @configure_input@

import argparse
import os
import subprocess
import shlex
import tempfile
import sys # sys.stderr
import copy
import shutil # shutil.rmtree

script = os.path.abspath(sys.argv[0])

# Interface to autoconf
prefix='''@prefix@'''
exec_prefix='''@exec_prefix@'''.replace('''${prefix}''', prefix)

with_ppcg='''@with_ppcg@'''
with_pencil_util='''@with_pencil_util@'''
with_prl='''@with_pencil_util@'''

abs_srcdir='''@abs_srcdir@'''
abs_builddir='''@abs_builddir@'''
includedir='''@includedir@'''.replace('''${prefix}''', prefix)
bindir='''@bindir@'''.replace('''${exec_prefix}''', exec_prefix)
libdir='''@libdir@'''.replace('''${exec_prefix}''', exec_prefix)
datarootdir='''@datarootdir@'''.replace('''${prefix}''', prefix)
datadir='''@datadir@'''.replace('''{datarootdir}''',datarootdir).replace('''${prefix}''', prefix)

PPCG_BUILDDIR='''@PPCG_BUILDDIR@'''
PPCG_SRCDIR='''@PPCG_SRCDIR@'''

PENCIL_UTIL_BUILDDIR='''@PENCIL_UTIL_BUILDDIR@'''
PENCIL_UTIL_SRCDIR='''@PENCIL_UTIL_SRCDIR@'''

PRL_BUILDDIR='''@PRL_BUILDDIR@'''
PRL_SRCDIR='''@PRL_SRCDIR@'''


# Return true if running from build directory
#   True means accompanied files are looked for in the build directory
#   False means files are searched in the prefix path
def is_build():
	return abs_builddir and (os.path.dirname(script) == os.path.abspath(abs_builddir))


class Configuration:
	props = ['config', # Informational only
		  'use_cc', 'cc_prog', 'cc_flags', 'cc_verbose',
		  'use_ppcg', 'ppcg_prog', 'ppcg_flags', 'ppcg_verbose',
		  'pencil_h_cppflags',
		  'pencil_opencl_ppcgflags',
		  'ocl_utilities_cppflags', 'ocl_utilities_cflags', 
		  'use_prl', 'prl_cppflags', 'prl_lflags',
		  'common_cppflags','common_cflags','common_lflags']

	def __init__(self):
		for prop in self.props:
			setattr(self, prop, None)

	def merge(self, other):
		for prop in self.props:
			val = getattr(self, prop, None)
			if val is None:
				setattr(self, prop, getattr(other, prop))

	# Platform introspection and default values
	def system_config(self):
		self.config = 'system'

		self.use_cc = True
		self.cc_prog = 'cc'
		self.cc_flags = []
		self.cc_verbose = 0

		self.use_ppcg = True
		self.ppcg_prog = 'ppcg'
		self.ppcg_flags = []
		self.ppcg_verbose = 0
		
		self.pencil_h_cppflags = []
		self.pencil_opencl_ppcgflags = ['--opencl-include-file=pencil_opencl.h']

		self.ocl_utilities_cflags = []
		self.ocl_utilities_cppflags = []

		self.use_prl = True #TODO: Search for existance of libprl_opencl in system library path
		self.prl_cppflags = []
		self.prl_lflags = ['-lprl_opencl']
		
		self.common_cppflags = []
		self.common_cflags = []
		self.common_lflags = []


	def build_config(self):
		self.config = 'build'

		if with_ppcg=='no':
			self.use_ppcg = False
			self.ppcg_prog = ''
			self.ppcg_verbose = 0
			self.ocl_utilities_cppflags = []
			self.ocl_utilities_cflags = []
		elif with_ppcg=='bundled' or with_ppcg=='build':
			self.use_ppcg = True
			self.ppcg_prog = os.path.join(PPCG_BUILDDIR,'ppcg')
			self.ocl_utilities_cppflags =  ['-I', PPCG_SRCDIR]
			self.ocl_utilities_cflags = [os.path.join(PPCG_SRCDIR,'ocl_utilities.c')]

		if with_pencil_util=='no':
			self.pencil_h_cppflags = []
			self.pencil_opencl_ppcgflags = []
		elif with_pencil_util=='bundled' or with_pencil_util=='build':
			self.pencil_h_cppflags = ['-I', os.path.join(PENCIL_UTIL_SRCDIR, 'include')]
			self.pencil_opencl_ppcgflags = ['--opencl-include-file=' + os.path.join(PENCIL_UTIL_SRCDIR, 'include', 'pencil_opencl.h')]

		if with_prl=='no':
			self.use_prl = False
			self.prl_cppflags = []
			self.prl_lflags = []
		elif with_prl=='bundled' or with_prl=='build':
			self.use_prl = True
			self.prl_cppflags = ['-I', os.path.join(PRL_SRCDIR, 'include')]
			self.prl_lflags = ['-L', os.path.join(PRL_BUILDDIR, 'src', '.libs'), '-lprl_opencl']

		self.common_cppflags = []
		self.common_cflags = []
		self.common_lflags = []


	def install_config(self):
		self.config = 'install'
		
		self.use_ppcg = (with_ppcg!='no')
		self.ppcg_prog = os.path.join(bindir,'ppcg')
		self.ppcg_flags = []
		self.ppcg_verbose = 0

		self.pencil_h_cppflags = []
		self.pencil_opencl_ppcgflags = ['--opencl-include-file=' + os.path.join(includedir,'pencil_opencl.h')]

		self.ocl_utilities_cppflags = []
		self.ocl_utilities_cflags =  [os.path.join(datadir,'ppcg','ocl_utilities.c')]

		self.use_prl = (with_prl!='no')
		self.prl_cppflags = []
		self.prl_lflags = ['-lprl_opencl']
		
		self.common_cppflags =  ['-I', includedir]
		self.common_cflags = []
		self.common_lflags = ['-L', libdir]


def show_config(config):
	if is_build():
		print("Running from builddir")
	else:
		print("Running outside builddir")
	print("cmdline:", ' '.join([shlex.quote(s) for s in sys.argv]))
	for prop in config.props:
		val=getattr(config,prop)
		if type(val) is list:
			s=' '.join([shlex.quote(v) for v in val])
		elif type(val) is str:
			s=shlex.quote(val)
		else:
			s=str(val)
		print(prop,'=',s)

system_config = None
def get_system_config():
	global system_config
	if not system_config:
		system_config = Configuration()
		system_config.system_config()
	return system_config

build_config = None
def get_build_config():
	global build_config
	if not build_config:
		build_config = Configuration()
		build_config.build_config()
		build_config.merge(get_system_config())
	return build_config

install_config = None
def get_install_config():
	global install_config
	if not install_config:
		install_config = Configuration()
		install_config.install_config()
		install_config.merge(get_system_config())
	return install_config

default_config = None
def get_default_config():
	global default_config
	if not default_config:
		if is_build():
			default_config = copy.copy(get_build_config())
		else:
			default_config = copy.copy(get_install_config())
		default_config.merge(get_system_config())
	return default_config



### Global options

print_commands = False
print_commands_baseonly = False

config = Configuration()



def print_command(cmd, *args,cwd=None,addenv=None,appendenv=None,force=False,prefix='$ '):
	if print_commands or force:
		shortcmd = os.path.basename(cmd) if print_commands_baseonly else shlex.quote(cmd)
		setenvs = []
		if addenv is not None:
			for envkey,envval in addenv.items():
				setenvs += [envkey + '=' + shlex.quote(envval)]
		if appendenv is not None:
			for envkey,envval in appendenv.items():
				if not envval:
					continue
				setenvs += [envkey + '=${' + envkey + '}:' + shlex.quote(envval)]
		setenv=''
		for elt in setenvs:
			setenv += elt + ' '
		if cwd is None:
			print(prefix + setenv + shortcmd + ' ' + ' '.join([shlex.quote(s) for s in args]),file=sys.stderr)
		else:
			print(prefix + '(cd ' + shlex.quote(cwd) + ' && ' + setenv + shortcmd + ' ' + ' '.join([shlex.quote(s) for s in args]) + ')',file=sys.stderr)

def invoke(cmd, *args,cwd=None,addenv=None,appendenv=None,showonly=False):
	print_command(cmd, *args,cwd=cwd,addenv=addenv,appendenv=appendenv)
	env=None
	if addenv is not None or appendenv is not None:
		env = copy.copy(os.environ)
	if addenv is not None:
		env.update(addenv)
	if appendenv is not None:
		for key,val in appendenv.items():
			if not val:
				continue
			oldval = env.get(key)
			if oldval:
				env[key] = oldval + ':' + val
			else:
				env[key] = val
	sys.stdout.flush()
	sys.stderr.flush()
	if not showonly:
		rtncode = subprocess.call([cmd] + list(args),cwd=cwd,env=env)
		if rtncode!=0:
			exit(rtncode)


def verbosity(lvl):
	if lvl > 0:
		return ['-' + 'v' * lvl]
	return []


def call_ppcg(*args):
	invoke(config.ppcg_prog, *args)
def invoke_ppcg(*args):
	allargs = verbosity(config.ppcg_verbose)
	allargs += config.ppcg_flags
	allargs += args
	call_ppcg(*args)

def call_cc(*cmdline):
	invoke(config.cc_prog, *cmdline)
def invoke_cc(*cmdline):
	extra_flags = verbosity(config.cc_verbose)
	extra_flags += config.cc_flags
	extra_flags += cmdline
	call_cc(*extra_flags)

# Currently unused
def invoke_libtool_cc(*cmdline):
	extra_flags = verbosity(config.cc_verbose)
	extra_flags += config.cc_flags
	extra_flags += cmdline
	invoke('libtool', '--mode=link',  '--tag=CC', cc_prog, *extra_flags)


def print_versions():
	print("PENCIL driver", '''@GIT_HEAD_ID@''')
	print()

	if config.ppcg_prog:
		print("ppcg: ")
		try:
			call_ppcg('--version')
		except Exception:
			pass
		print()

	if config.cc_prog:
		print("cc: ")
		try:
			call_cc('--version')
		except Exception:
			pass
		print()

def add_captured_cc_args(parser):
	# Passed to PPCG and CC
	parser.add_argument('-D', action='append', default=[], help=argparse.SUPPRESS)
	parser.add_argument('-I', action='append', default=[], help=argparse.SUPPRESS)

	# Compatibility arguments; required so the file name argument is not interpreted as input file
	parser.add_argument('-o', metavar='OUTPUT', help=argparse.SUPPRESS)
	parser.add_argument('-std', metavar='STD', choices=['gnu99', 'c99'],
		help="C standard mode (default: c99)") #TODO: What if cc is not gcc? What with other standards?


def parsecmd(defaultcfg, is_tool):
	parser = argparse.ArgumentParser(description="Driver for PENCIL.  Executes pencil-optimizer, ppcg and compiler as required.",add_help=False,
								  epilog="Influential environment variables: CPP, CC")
	parser.add_argument('-h', '--help', action='store_true', help="Show this help message and exit")
	parser.add_argument('--version', action='store_true', help="Print versions of involved programs")
	parser.add_argument('--show-invocation', action='store_true', default=False, help="Print the command that invoked pencilcc")
	parser.add_argument('--show-commands', action='store_true', default=False, help="Print executed commands")
	parser.add_argument('--show-commands-baseonly', action='store_true', default=False, help="Do not print full command path")	
	parser.add_argument('--show-run-var', choices=['LD_LIBRARY_PATH'], help="Show the effective variable and exit") # TODO: Something more general?
	parser.add_argument('--show-config', action='store_true', help="Show tools' flags and exit")

	parser.add_argument('-v', '--verbose', action='count', default=0, help="More verbose output")
	parser.add_argument('--pencil-config', choices=['system', 'build', 'install'], help="Introspection to use")

	parser.add_argument('--keep', action='store_true', help="Keep temporary files next to files to compile")
	parser.add_argument('--keep-tmp', action='store_true', help="Do not delete temporary directory when finished")
	parser.add_argument('--pencil-tmpdir', help="Directory to use for temporary files")

	parser.add_argument('--pencil-ppcg', metavar='PPCG', default=None, help="Path to ppcg (default: " + defaultcfg.ppcg_prog + ")")
	if not is_tool:
		parser.add_argument('--pencil-ppcg-args', action='append', default=[], metavar='ARGS', help="Additional argument to pass to PPCG")
		parser.add_argument('--pencil-cc', metavar='CC', help="C compiler (default: " + defaultcfg.cc_prog + ")")
		parser.add_argument('--pencil-cc-args', action='append', default=[], metavar='ARGS', help="Additional argument to pass to CC")
	parser.add_argument('--pencil-ext', metavar='SUFFIXES', action='append', default=['.pencil.c', '.pencil'],
		help="File extentions for forcing --pet-autodetect (default: .pencil.c,.pencil)")

	# Action control
	parser.add_argument('--noselfupdate', dest='selfupdate', action='store_false', default=True,
		help="Do not try to update yourself" if is_build() else argparse.SUPPRESS)
	parser.add_argument('--run', action='store_true', help="Run executable after compilation")
	parser.add_argument('--launch', nargs=argparse.REMAINDER, help="Run the argument (no compilation done)")

	#parser.add_argument('--pencil-output', choices=['opt', 'ppcg'],  help='Stop after this tool instead the entire toolchain (default: ld)')

	#parser.add_argument('--pencil-ppcg', action='store_true', default=None,
	#	help="Use ppcg in toolchain" if not defaultcfg.use_ppcg and with_ppcg!='no' else argparse.SUPPRESS)
	#parser.add_argument('--pencil-noppcg', action='store_true',  default=None,
	#	help="Do not use ppcg in toolchain" if defaultcfg.use_ppcg and with_ppcg!='no' else argparse.SUPPRESS)


	#parser.add_argument('--pencil-runtime', action='store_true', default=None,
	#	help="Use the PENCIL OpenCL runtime" if not defaultcfg.use_prl else argparse.SUPPRESS)
	#parser.add_argument('--pencil-noruntime', action='store_true',default=None,
	#	help="Do not use the PENCIL OpenCL runtime" if defaultcfg.use_prl else argparse.SUPPRESS)


	# Passed to PPCG only
	if not is_tool:
		parser.add_argument('--opencl-include-file', metavar='HEADER', action='append', default=[], help=argparse.SUPPRESS)
		parser.add_argument('--no-isl-schedule-separate-components', action='store_true', help=argparse.SUPPRESS)
		parser.add_argument('--isl-schedule-max-coefficient', metavar='CEOFF', help=argparse.SUPPRESS)
		parser.add_argument('--no-shared-memory', action='store_true', help=argparse.SUPPRESS)
		parser.add_argument('--no-private-memory', action='store_true', help=argparse.SUPPRESS)
		parser.add_argument('--sizes', metavar='SIZES', help=argparse.SUPPRESS)
		parser.add_argument('--dump-sizes', action='store_true', help=argparse.SUPPRESS)
		parser.add_argument('--target', metavar='TARGET', choices=['opencl'], help=argparse.SUPPRESS)
		parser.add_argument('--no-opencl-print-kernel-types', action='store_true', help=argparse.SUPPRESS)
		parser.add_argument('--no-schedule-whole-component', action='store_true', help=argparse.SUPPRESS)
		parser.add_argument('--schedule-maximize-coincidence', action='store_true', help=argparse.SUPPRESS)
		parser.add_argument('--pet-autodetect', action='store_true', help=argparse.SUPPRESS)

	if is_tool:
		parser.add_argument('tool')
		parser.add_argument('tool_args', nargs=argparse.REMAINDER)
	else:
		add_captured_cc_args(parser)


	known, unknown = parser.parse_known_args() # Beware of prefix matching: https://mail.python.org/pipermail/python-dev/2013-November/130601.html http://bugs.python.org/issue14910
	if is_tool:
		# Parse the tool's arguments
		parser = argparse.ArgumentParser(add_help=False)
		add_captured_cc_args(parser)
		tool_known, tool_unkown = parser.parse_known_args(known.tool_args)
		known.D = tool_known.D
		known.I = tool_known.I
		known.std = tool_known.std
		known.o = tool_known.o
		known.pencil_cc = tool_known.tool
		known.cc_args = tool_known.tool_args
		known.ppcg_args = unknown
	else:
		known.cc_args = unknown
		known.ppcg_args = []

	return known, parser



def get_config_from_argparse(known):
	config = Configuration()

	if known.pencil_ppcg is not None:
		config.ppcg_prog = known.pencil_ppcg_path
	config.ppcg_verbose = max(0, known.verbose - 1)

	if known.pencil_cc is not None:
		config.cc_prog = known.pencil_cc
	config.cc_verbose = max(0, known.verbose - 1)

	return config


def get_run_ld_library_path():
	runtime_lflags = []
	runtime_lflags += config.common_lflags
	runtime_lflags += config.prl_lflags

	# Parse lflags, search for paths
	lflagsparser = argparse.ArgumentParser(add_help=False)
	lflagsparser.add_argument('-L', action='append')
	lflagsparser.add_argument('-l', action='append')
	lflags, other = lflagsparser.parse_known_args([''] + runtime_lflags)

	libpaths = []
	for L in lflags.L:
		libpaths.append(L)
	return ':'.join(libpaths)



def launch(*args):
	libpaths=get_run_ld_library_path()

	if not libpaths:
		invoke(*args)
	else:
		invoke(*args,appendenv={'LD_LIBRARY_PATH': libpaths})


class CCArg:
	arg = None
	input_file = None
	generated_file = None

	def __init__(self, arg, is_input):
		if is_input:
			self.input_file = arg
		else:
			self.arg = arg

	def is_arg(self):
		return self.arg is not None

	def latest_file(self):
		return self.generated_file or self.input_file

	def arg_or_latest_file(self):
		return self.arg or self.latest_file()



def process(is_tool):
	known, parser = parsecmd(get_system_config(), is_tool)
	
	# Do early because the selfupdate feature reads it
	global print_commands,print_commands_baseonly
	print_commands = (known.verbose > 0) or known.show_commands or known.show_commands_baseonly
	print_commands_baseonly = known.show_commands_baseonly

	if known.show_invocation:
		print_command(*sys.argv,force=True)

	# Re-configure the script automatically if in builddir
	if known.selfupdate and is_build():
		invoke('make', os.path.basename(script),cwd=os.path.dirname(script))
		cmdline=[sys.argv[0], '--noselfupdate'] + sys.argv[1:]
		cmdline = [ x for x in cmdline if x !=  '--show-invocation'] # Do not show invocation a second time
		invoke(*cmdline)
		return

	global config
	config = get_config_from_argparse(known)
	if known.pencil_config=='system':
		config.merge(get_system_config())
	elif known.pencil_config=='build':
		config.merge(get_build_config())
	elif known.pencil_config=='install':
		config.merge(get_install_config())
	else:
		config.merge(get_default_config())

	if known.help:
		known, parser = parsecmd(config) # To use correct defaults
		parser.print_help()
		return 

	if known.show_config:
		show_config(config)
		return

	if known.version:
		print_versions()
		return

	if known.show_run_var:
		# Only LD_LIBRARY_PATH supported at the moment
		print(get_run_ld_library_path())
		return

	if known.launch:
		launch(*known.launch)
		return

	pre_cc_args = []
	cc_args = known.cc_args
	post_cc_args = []

	file_args = []
	n_files = 0
	prev_is_l = False
	for arg in cc_args:
		if prev_is_l:
			file_args += [CCArg(arg, False)]
			prev_is_l = False
		elif arg=='-l':
			file_args += [CCArg(arg, False)]
			prev_is_l = True
		elif arg.startswith('-'):
			file_args += [CCArg(arg, False)]
		else:
			file_args += [CCArg(arg, True)]
			n_files += 1

	if n_files<=0:
		print("No input files")
		exit(4)

	user_cppflags = []
	for flag in known.D:
		user_cppflags += ['-D' + flag]
	for i in known.I:
		user_cppflags += ['-I', i]

	ppcgargs = []
	for incfile in known.opencl_include_file:
		ppcgargs += ['--opencl-include-file=' + incfile]
	if known.no_isl_schedule_separate_components:
		ppcgargs += ['--no-isl-schedule-separate-components']
	if not known.isl_schedule_max_coefficient is None:
		ppcgargs += ['--isl-schedule-max-coefficient=' + known.isl_schedule_max_coefficient]
	if known.no_shared_memory:
		ppcgargs += ['--no-shared-memory']
	if known.no_private_memory:
		ppcgargs += ['--no-private-memory']
	if not known.sizes is None:
		ppcgargs += ['--sizes=' + known.sizes]
	if known.dump_sizes:
		ppcgargs += ['--dump-sizes']
	if known.no_opencl_print_kernel_types:
		ppcgargs += ['--no-opencl-print-kernel-types']
	if known.no_schedule_whole_component:
		ppcgargs += ['--no-schedule-whole-component']
	if known.schedule_maximize_coincidence:
		ppcgargs += ['--schedule-maximize-coincidence']

	if known.std is None:
		pre_cc_args += ['-std=gnu99']
	else:
		pre_cc_args += ['-std=' + known.std]

	ppcgargs += known.ppcg_args
	ppcgargs += [s for args in known.pencil_ppcg_args for s in shlex.split(args)]

	post_cc_args += [s for args in known.pencil_cc_args for s in shlex.split(args)]

	if known.keep:
		compile(user_cppflags, ppcgargs, pre_cc_args, file_args, post_cc_args, None, known.o, known)
	elif known.pencil_tmpdir:
		tmpdir = known.pencil_tmpdir
		if os.path.isdir(tmpdir):
			# Do not delete directories we did not create
			compile(user_cppflags, ppcgargs, pre_cc_args, file_args, post_cc_args, tmpdir, known.o,  known)
		else:
			os.makedirs(tmpdir)
			compile(user_cppflags, ppcgargs, pre_cc_args, file_args, post_cc_args, tmpdir, known.o, known)
			if not known.keep_tmp:
				shutil.rmtree(tmpdir)
	elif known.keep_tmp:
		tmpdir = tempfile.mkdtemp(prefix='pencil.')
		compile(user_cppflags, ppcgargs, pre_cc_args, file_args, post_cc_args, tmpdir, known.o, known)
	else:
		with tempfile.TemporaryDirectory(prefix='pencil.') as tmpdir:
			compile(user_cppflags, ppcgargs, pre_cc_args, file_args, post_cc_args, tmpdir, known.o, known)

	if known.run:
		execfilename = 'a.out'
		if known.o is not None:
			execfilename = known.o
		if not os.path.isabs(execfilename):
			execfilename = './' + execfilename
		launch(execfilename)


def get_cppflags(stage, user_cppflags):
	global config
	cppflags = []
	if stage is None:
		cppflags += ['-D__PENCIL__']
	else:
		cppflags += ['-D__PENCIL__=' + str(stage)]
	cppflags += config.common_cppflags
	cppflags += config.pencil_h_cppflags
	if config.use_prl:
		cppflags += config.prl_cppflags
	else:
		cppflags += config.ocl_utilities_cppflags
	if user_cppflags:
		cppflags += user_cppflags
	return cppflags


def has_ext(filename, suffixes):
	for suffix in suffixes:
		if filename.endswith(suffix):
			return True
	return False


def compile(user_cppflags, user_ppcgargs, pre_cc_args, file_args, post_cc_args, tmpdir, output, known):
	global config

	n_generated = 0
	#outfiles = []
	origdirrefs = []
	#anyoptimized = False
	for filearg in file_args:
		if filearg.is_arg():
			continue

		infile = filearg.input_file
		dirname, basename = os.path.split(infile)
		rootname,ext = os.path.splitext(basename)
		ispencil = has_ext(infile, known.pencil_ext)
		#optext = has_ext(infile, config.opt_exts)
		#extcext = has_ext(infile, config.extc_exts)
		#isc = (optext or extcext) and os.path.isfile(infile)
		#ispencil = isc and optext
		#file = infile
		origdirref = []

		if config.use_ppcg:
			ppcgargs = copy.copy(user_ppcgargs)
			if ispencil or known.pet_autodetect:
				ppcgargs += ['--pet-autodetect']

			if tmpdir is None:
				subdir = '.'
				outfile = os.path.join(subdir, rootname + '.ppcg' + ext)
			else:
				subdir = tempfile.mkdtemp(prefix='ppcg.', dir=tmpdir)
				outfile = os.path.join(subdir, basename) # We try to leave the name unchanged, in case a __FILE__ is used in there
				origdirref += ['-I', dirname]
				ppcgargs += ['--opencl-embed-kernel-code']

			ppcgargs += get_cppflags(2, user_cppflags)
			if config.use_prl:
				ppcgargs += ['--target=prl']
			else:
				ppcgargs += ['--target=opencl']
			ppcgargs += config.pencil_opencl_ppcgflags
			ppcgargs += [infile]
			if outfile:
				ppcgargs += ['-o', outfile]
			invoke_ppcg(*ppcgargs)

			filearg.generated_file = outfile
			n_generated += 1

		origdirrefs += origdirref

	ccargs = []
	ccargs += pre_cc_args
	ccargs += origdirrefs
	ccargs += get_cppflags(3, user_cppflags)
	ccargs += config.common_cflags

	for filearg in file_args:
		ccargs += [filearg.arg_or_latest_file()]

	if not config.use_prl:
		ccargs += config.ocl_utilities_cflags

	ccargs += post_cc_args

	# add linking args behind files
	ccargs += config.common_lflags
	if config.use_prl:
		ccargs += config.prl_lflags
	ccargs += ['-lOpenCL', '-lm']

	if output:
		ccargs += ['-o', output]
	invoke_cc(*ccargs)


def main():
	return process(False)


if __name__ == '__main__':
	main()
